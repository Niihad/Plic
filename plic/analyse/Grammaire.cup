package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.exceptions.AnalyseSyntaxiqueException;
import plic.arbre.tds.*;
import plic.instructions.*;


import java_cup.runtime.*;

action code {:  BlocDInstructions arbre = new BlocDInstructions() ;
				ArrayList<String> ALidf;
				ArrayList<BlocDInstructions> ALinstr;
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASS), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALE), "=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ECRIR), "ecrire") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SI), "si") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ALORS), "alors") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SINON), "sinon") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FINSI), "fsi") ;
        
        lesTerminaux.put(new Integer(CodesLexicaux.STATUT), "publique | privee") ;
        lesTerminaux.put(new Integer(CodesLexicaux.TYPE), "entier | bool") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

non terminal ArbreAbstrait SYSTEME, CLASSE;
non terminal String LIDF;
non terminal Affectation AFFECT;
non terminal Conditionnelle CONDITION;
non terminal Expression EXPR, CSTE;
non terminal BlocDInstructions LDECLARATION, DECLARATION, DECL_CONST, DECL_CHAMP, LINSTRUCTION, INSTRUCTION, ECRIRE;


terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER, SI, ALORS, SINON, FINSI;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON ;
terminal Symbol    CLASS, FIN, EGALE, ECRIR;
terminal String    CONSTANTEINT, CONSTANTEBOOL, VIRGULE, POINT_VIRGULE, IDF, CONSTANTECHAINE, STATUT, TYPE;
   
/* Non terminals used in the grammar section.  */

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with SYSTEME ;

SYSTEME    ::=  CLASSE:c
                {: RESULT = c; :};

CLASSE ::= CLASS:c IDF:nomClasse LDECLARATION:ld FIN
                    {: RESULT = ld; :}
                    | CLASS:c IDF:nomClasse FIN ;
                    
LDECLARATION ::= LDECLARATION:ld DECLARATION:d
 				{: ld.ajouter(d);
				  RESULT = ld; :}
			 | DECLARATION:d
			    {:BlocDInstructions b = new BlocDInstructions() ;
			      b.ajouter(d) ;
				  RESULT = b; :};
				 		
DECLARATION  ::= DECL_CHAMP:dc POINT_VIRGULE
				{: RESULT = dc; :}
			 | DECL_CONST:dc
			 	{: RESULT = dc; :};
			 //| DECL_FONCTION:df
			 	//{: RESULT = df; :};
			 
DECL_CHAMP ::= STATUT:s TYPE:t IDF:idf
			    {: RESULT = new Declaration(idf, idfleft+1, s, t); :}
   		   	| STATUT:s TYPE:t IDF:idf LIDF 
   		  		{: for (String idfListe: ALidf)
   		  				arbre.ajouter(new Declaration(idfListe, idfleft+1, s, t));
   		  			RESULT = new Declaration(idf, idfleft+1, s, t); 
   		  		:}
   		  	| STATUT:s TYPE:t IDF:idf EGALE EXPR:e
			    {: RESULT = new DeclarationAffectation(idf, s, t, e, idfleft+1); :};
			    

LIDF ::= VIRGULE IDF:idf LIDF
		 {:	ALidf.add(idf); :}
	 | VIRGULE IDF:idf
	   {:	ALidf = new ArrayList<String>();
	   		ALidf.add(idf); :};

DECL_CONST ::= INSTRUCTION:li
			   {: RESULT = li; :};
			   
//LINSTRUCTION ::= LINSTRUCTION INSTRUCTION:i
				// {: RESULT = i; :}
			// | INSTRUCTION:i
			    // {: RESULT = i; :};	

INSTRUCTION ::= AFFECT:a POINT_VIRGULE
				{: RESULT = a; :}
			| ECRIRE:e POINT_VIRGULE
				{: RESULT = e; :}
			| CONDITION:c
				{: RESULT = c; :};

AFFECT ::= IDF:idf EGALE EXPR:e 
                {: RESULT = new Affectation(idf, e, idfleft+1); :};


ECRIRE ::= ECRIR CONSTANTECHAINE:chaine 
		   {:  RESULT = new EcrireChaine(chaine); :}
   	   | ECRIR EXPR:e
		   {:  RESULT = new EcrireExpression(e); :};
		   
CONDITION ::= SI EXPR:e ALORS LDECLARATION:d SINON LDECLARATION:sinon FINSI
			  {:RESULT = new Conditionnelle(e, d, sinon); :}
			  | SI EXPR:e ALORS LDECLARATION:d FINSI
			  {: RESULT = new Conditionnelle(e, d); :}
			  | SI EXPR:e ALORS FINSI								
			  {: RESULT = new Conditionnelle(e, null, null); :}
			  | SI EXPR:e ALORS SINON LDECLARATION:sinon FINSI		
			  {: RESULT = new Conditionnelle(e, null, sinon); :}
			  | SI EXPR:e ALORS LDECLARATION:d SINON FINSI 			
			  {: RESULT = new Conditionnelle(e, d, null); :}
			  | SI EXPR:e ALORS SINON FINSI							
			  {: RESULT = new Conditionnelle(e, null, null); :};

    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d,gleft+1) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d,gleft+1); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d,gleft+1); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d,gleft+1); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d,gleft+1); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d,gleft+1); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d,gleft+1); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d,gleft+1); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e,eleft+1); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d,gleft+1); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d,gleft+1); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e,eleft+1); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
        |
        		IDF:idf
        		{: RESULT = new ConstanteVariable(idf, idfleft+1); :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;